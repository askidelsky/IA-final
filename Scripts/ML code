{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd # load pandas library\n",
    "import json # import the json library\n",
    "import requests # to get data via api\n",
    "import numpy as np # import numpy library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def getdata(symbol):\n",
    "    a = symbol.reset_index() # resetting index\n",
    "    b = a.iloc[5: , :] #first five rows are removed as it contains null value, using iloc function\n",
    "    b = b.drop(['Meta Data'], axis = 1) # using drop function, dropping metadata column as it is of no use for us\n",
    "    b = b.reset_index()  # resetting index\n",
    "    lst = [i for i in b['Time Series (Daily)']] #using loop in time series (daily) column to get data in list format.\n",
    "    c = pd.DataFrame.from_dict(lst) # using from_dict function converting dict to dataframe\n",
    "    c['date'] = b['index'] #getting first column i.e. date column\n",
    "    d = c[(c['date']>'2017-01-01')& (c['date']<'2022-01-01')] #using condition to get data for 5 years i.e. from 2015-2020\n",
    "    # renaming columns for better understanding\n",
    "    d.columns = ['open', 'high', 'low', 'close', 'volume', 'date']\n",
    "    return d #required clean data is returned"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>178.0850</td>\n",
       "      <td>179.2300</td>\n",
       "      <td>177.2600</td>\n",
       "      <td>177.5700</td>\n",
       "      <td>61661433</td>\n",
       "      <td>2021-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>179.4700</td>\n",
       "      <td>180.5700</td>\n",
       "      <td>178.0900</td>\n",
       "      <td>178.2000</td>\n",
       "      <td>59773014</td>\n",
       "      <td>2021-12-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>179.3300</td>\n",
       "      <td>180.6300</td>\n",
       "      <td>178.1400</td>\n",
       "      <td>179.3800</td>\n",
       "      <td>62348931</td>\n",
       "      <td>2021-12-29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>180.1600</td>\n",
       "      <td>181.3300</td>\n",
       "      <td>178.5300</td>\n",
       "      <td>179.2900</td>\n",
       "      <td>79144339</td>\n",
       "      <td>2021-12-28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>177.0850</td>\n",
       "      <td>180.4200</td>\n",
       "      <td>177.0700</td>\n",
       "      <td>180.3300</td>\n",
       "      <td>74919582</td>\n",
       "      <td>2021-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>117.9500</td>\n",
       "      <td>119.4300</td>\n",
       "      <td>117.9400</td>\n",
       "      <td>118.9900</td>\n",
       "      <td>33561948</td>\n",
       "      <td>2017-01-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>116.7800</td>\n",
       "      <td>118.1600</td>\n",
       "      <td>116.4700</td>\n",
       "      <td>117.9100</td>\n",
       "      <td>31751900</td>\n",
       "      <td>2017-01-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1338</th>\n",
       "      <td>115.9200</td>\n",
       "      <td>116.8642</td>\n",
       "      <td>115.8100</td>\n",
       "      <td>116.6100</td>\n",
       "      <td>22193587</td>\n",
       "      <td>2017-01-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1339</th>\n",
       "      <td>115.8500</td>\n",
       "      <td>116.5100</td>\n",
       "      <td>115.7500</td>\n",
       "      <td>116.0200</td>\n",
       "      <td>21118116</td>\n",
       "      <td>2017-01-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1340</th>\n",
       "      <td>115.8000</td>\n",
       "      <td>116.3300</td>\n",
       "      <td>114.7600</td>\n",
       "      <td>116.1500</td>\n",
       "      <td>28781865</td>\n",
       "      <td>2017-01-03</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1259 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          open      high       low     close    volume        date\n",
       "82    178.0850  179.2300  177.2600  177.5700  61661433  2021-12-31\n",
       "83    179.4700  180.5700  178.0900  178.2000  59773014  2021-12-30\n",
       "84    179.3300  180.6300  178.1400  179.3800  62348931  2021-12-29\n",
       "85    180.1600  181.3300  178.5300  179.2900  79144339  2021-12-28\n",
       "86    177.0850  180.4200  177.0700  180.3300  74919582  2021-12-27\n",
       "...        ...       ...       ...       ...       ...         ...\n",
       "1336  117.9500  119.4300  117.9400  118.9900  33561948  2017-01-09\n",
       "1337  116.7800  118.1600  116.4700  117.9100  31751900  2017-01-06\n",
       "1338  115.9200  116.8642  115.8100  116.6100  22193587  2017-01-05\n",
       "1339  115.8500  116.5100  115.7500  116.0200  21118116  2017-01-04\n",
       "1340  115.8000  116.3300  114.7600  116.1500  28781865  2017-01-03\n",
       "\n",
       "[1259 rows x 6 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=AAPL&&outputsize=full&apikey=F2MED2PM07CN4D7U'\n",
    "r = requests.get(url) #getting the api file for specified ticker symbol sending GET request to the specified url\n",
    "apple = r.json() #converting to json\n",
    "apple = pd.DataFrame(apple) #converting to dataframe\n",
    "Apple = getdata(apple) #using function we defined above \"getdata\" to get the clean version of required data\n",
    "Apple "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>153.6200</td>\n",
       "      <td>156.7300</td>\n",
       "      <td>148.1000</td>\n",
       "      <td>148.3900</td>\n",
       "      <td>1376205</td>\n",
       "      <td>2021-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>151.0000</td>\n",
       "      <td>160.0000</td>\n",
       "      <td>150.0000</td>\n",
       "      <td>155.3300</td>\n",
       "      <td>1561882</td>\n",
       "      <td>2021-12-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>147.8500</td>\n",
       "      <td>155.4900</td>\n",
       "      <td>142.1400</td>\n",
       "      <td>153.9300</td>\n",
       "      <td>2037406</td>\n",
       "      <td>2021-12-29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>147.5000</td>\n",
       "      <td>157.4100</td>\n",
       "      <td>146.4100</td>\n",
       "      <td>146.4600</td>\n",
       "      <td>1334472</td>\n",
       "      <td>2021-12-28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>152.0000</td>\n",
       "      <td>152.6211</td>\n",
       "      <td>140.0000</td>\n",
       "      <td>148.3100</td>\n",
       "      <td>1615449</td>\n",
       "      <td>2021-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>24.6000</td>\n",
       "      <td>24.6600</td>\n",
       "      <td>24.3300</td>\n",
       "      <td>24.4900</td>\n",
       "      <td>1646678</td>\n",
       "      <td>2017-01-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>25.1500</td>\n",
       "      <td>25.1700</td>\n",
       "      <td>24.5000</td>\n",
       "      <td>24.5200</td>\n",
       "      <td>2334362</td>\n",
       "      <td>2017-01-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1338</th>\n",
       "      <td>25.5600</td>\n",
       "      <td>25.5600</td>\n",
       "      <td>24.9000</td>\n",
       "      <td>25.0000</td>\n",
       "      <td>3037617</td>\n",
       "      <td>2017-01-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1339</th>\n",
       "      <td>25.5800</td>\n",
       "      <td>26.0500</td>\n",
       "      <td>25.5800</td>\n",
       "      <td>25.9200</td>\n",
       "      <td>2243545</td>\n",
       "      <td>2017-01-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1340</th>\n",
       "      <td>25.4400</td>\n",
       "      <td>25.4700</td>\n",
       "      <td>25.0180</td>\n",
       "      <td>25.3700</td>\n",
       "      <td>1941351</td>\n",
       "      <td>2017-01-03</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1259 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          open      high       low     close   volume        date\n",
       "82    153.6200  156.7300  148.1000  148.3900  1376205  2021-12-31\n",
       "83    151.0000  160.0000  150.0000  155.3300  1561882  2021-12-30\n",
       "84    147.8500  155.4900  142.1400  153.9300  2037406  2021-12-29\n",
       "85    147.5000  157.4100  146.4100  146.4600  1334472  2021-12-28\n",
       "86    152.0000  152.6211  140.0000  148.3100  1615449  2021-12-27\n",
       "...        ...       ...       ...       ...      ...         ...\n",
       "1336   24.6000   24.6600   24.3300   24.4900  1646678  2017-01-09\n",
       "1337   25.1500   25.1700   24.5000   24.5200  2334362  2017-01-06\n",
       "1338   25.5600   25.5600   24.9000   25.0000  3037617  2017-01-05\n",
       "1339   25.5800   26.0500   25.5800   25.9200  2243545  2017-01-04\n",
       "1340   25.4400   25.4700   25.0180   25.3700  1941351  2017-01-03\n",
       "\n",
       "[1259 rows x 6 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=GME&&outputsize=full&apikey=F2MED2PM07CN4D7U'\n",
    "r = requests.get(url)\n",
    "gamestop = r.json()\n",
    "gamestop = pd.DataFrame(gamestop)\n",
    "gamestop = getdata(gamestop)\n",
    "gamestop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>121.2300</td>\n",
       "      <td>122.9100</td>\n",
       "      <td>118.5900</td>\n",
       "      <td>118.7900</td>\n",
       "      <td>24122093</td>\n",
       "      <td>2021-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>112.6300</td>\n",
       "      <td>124.3000</td>\n",
       "      <td>112.3000</td>\n",
       "      <td>122.9900</td>\n",
       "      <td>45437131</td>\n",
       "      <td>2021-12-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>113.8000</td>\n",
       "      <td>114.2000</td>\n",
       "      <td>110.3800</td>\n",
       "      <td>112.0900</td>\n",
       "      <td>21100463</td>\n",
       "      <td>2021-12-29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>116.2600</td>\n",
       "      <td>116.4200</td>\n",
       "      <td>114.4700</td>\n",
       "      <td>114.8000</td>\n",
       "      <td>17052102</td>\n",
       "      <td>2021-12-28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>117.8000</td>\n",
       "      <td>121.8000</td>\n",
       "      <td>116.1021</td>\n",
       "      <td>116.5900</td>\n",
       "      <td>17864372</td>\n",
       "      <td>2021-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>94.1600</td>\n",
       "      <td>95.6500</td>\n",
       "      <td>93.3100</td>\n",
       "      <td>94.7200</td>\n",
       "      <td>10823397</td>\n",
       "      <td>2017-01-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>94.4000</td>\n",
       "      <td>94.5000</td>\n",
       "      <td>93.0000</td>\n",
       "      <td>93.8900</td>\n",
       "      <td>7639786</td>\n",
       "      <td>2017-01-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1338</th>\n",
       "      <td>91.9100</td>\n",
       "      <td>94.8100</td>\n",
       "      <td>91.6400</td>\n",
       "      <td>94.3700</td>\n",
       "      <td>16816202</td>\n",
       "      <td>2017-01-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1339</th>\n",
       "      <td>88.9850</td>\n",
       "      <td>90.8900</td>\n",
       "      <td>88.5800</td>\n",
       "      <td>90.5100</td>\n",
       "      <td>11489724</td>\n",
       "      <td>2017-01-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1340</th>\n",
       "      <td>89.0000</td>\n",
       "      <td>89.0000</td>\n",
       "      <td>88.0800</td>\n",
       "      <td>88.6000</td>\n",
       "      <td>8789386</td>\n",
       "      <td>2017-01-03</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1259 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          open      high       low     close    volume        date\n",
       "82    121.2300  122.9100  118.5900  118.7900  24122093  2021-12-31\n",
       "83    112.6300  124.3000  112.3000  122.9900  45437131  2021-12-30\n",
       "84    113.8000  114.2000  110.3800  112.0900  21100463  2021-12-29\n",
       "85    116.2600  116.4200  114.4700  114.8000  17052102  2021-12-28\n",
       "86    117.8000  121.8000  116.1021  116.5900  17864372  2021-12-27\n",
       "...        ...       ...       ...       ...       ...         ...\n",
       "1336   94.1600   95.6500   93.3100   94.7200  10823397  2017-01-09\n",
       "1337   94.4000   94.5000   93.0000   93.8900   7639786  2017-01-06\n",
       "1338   91.9100   94.8100   91.6400   94.3700  16816202  2017-01-05\n",
       "1339   88.9850   90.8900   88.5800   90.5100  11489724  2017-01-04\n",
       "1340   89.0000   89.0000   88.0800   88.6000   8789386  2017-01-03\n",
       "\n",
       "[1259 rows x 6 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=BABA&&outputsize=full&apikey=F2MED2PM07CN4D7U'\n",
    "r = requests.get(url)\n",
    "Baba = r.json()\n",
    "Baba = pd.DataFrame(Baba)\n",
    "Baba = getdata(Baba)\n",
    "Baba"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>2910.8800</td>\n",
       "      <td>2927.3000</td>\n",
       "      <td>2893.5500</td>\n",
       "      <td>2893.5900</td>\n",
       "      <td>847077</td>\n",
       "      <td>2021-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>2929.0000</td>\n",
       "      <td>2941.2500</td>\n",
       "      <td>2915.1700</td>\n",
       "      <td>2920.0500</td>\n",
       "      <td>648851</td>\n",
       "      <td>2021-12-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>2928.5900</td>\n",
       "      <td>2943.6750</td>\n",
       "      <td>2910.0900</td>\n",
       "      <td>2930.0900</td>\n",
       "      <td>851236</td>\n",
       "      <td>2021-12-29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>2967.4900</td>\n",
       "      <td>2967.4900</td>\n",
       "      <td>2918.7100</td>\n",
       "      <td>2928.9600</td>\n",
       "      <td>931792</td>\n",
       "      <td>2021-12-28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>2949.2700</td>\n",
       "      <td>2968.5300</td>\n",
       "      <td>2945.0000</td>\n",
       "      <td>2961.2800</td>\n",
       "      <td>662966</td>\n",
       "      <td>2021-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>806.4000</td>\n",
       "      <td>809.9664</td>\n",
       "      <td>802.8300</td>\n",
       "      <td>806.6500</td>\n",
       "      <td>1274645</td>\n",
       "      <td>2017-01-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>795.2600</td>\n",
       "      <td>807.9000</td>\n",
       "      <td>792.2041</td>\n",
       "      <td>806.1500</td>\n",
       "      <td>1640170</td>\n",
       "      <td>2017-01-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1338</th>\n",
       "      <td>786.0800</td>\n",
       "      <td>794.4800</td>\n",
       "      <td>785.0200</td>\n",
       "      <td>794.0200</td>\n",
       "      <td>1335167</td>\n",
       "      <td>2017-01-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1339</th>\n",
       "      <td>788.3600</td>\n",
       "      <td>791.3400</td>\n",
       "      <td>783.1600</td>\n",
       "      <td>786.9000</td>\n",
       "      <td>1072958</td>\n",
       "      <td>2017-01-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1340</th>\n",
       "      <td>778.8100</td>\n",
       "      <td>789.6300</td>\n",
       "      <td>775.8000</td>\n",
       "      <td>786.1400</td>\n",
       "      <td>1657268</td>\n",
       "      <td>2017-01-03</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1259 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           open       high        low      close   volume        date\n",
       "82    2910.8800  2927.3000  2893.5500  2893.5900   847077  2021-12-31\n",
       "83    2929.0000  2941.2500  2915.1700  2920.0500   648851  2021-12-30\n",
       "84    2928.5900  2943.6750  2910.0900  2930.0900   851236  2021-12-29\n",
       "85    2967.4900  2967.4900  2918.7100  2928.9600   931792  2021-12-28\n",
       "86    2949.2700  2968.5300  2945.0000  2961.2800   662966  2021-12-27\n",
       "...         ...        ...        ...        ...      ...         ...\n",
       "1336   806.4000   809.9664   802.8300   806.6500  1274645  2017-01-09\n",
       "1337   795.2600   807.9000   792.2041   806.1500  1640170  2017-01-06\n",
       "1338   786.0800   794.4800   785.0200   794.0200  1335167  2017-01-05\n",
       "1339   788.3600   791.3400   783.1600   786.9000  1072958  2017-01-04\n",
       "1340   778.8100   789.6300   775.8000   786.1400  1657268  2017-01-03\n",
       "\n",
       "[1259 rows x 6 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=GOOG&&outputsize=full&apikey=F2MED2PM07CN4D7U'\n",
    "r = requests.get(url)\n",
    "Alphabet = r.json()\n",
    "Alphabet = pd.DataFrame(Alphabet)\n",
    "Alphabet = getdata(Alphabet)\n",
    "Alphabet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>1073.4444</td>\n",
       "      <td>1081.9999</td>\n",
       "      <td>1054.5900</td>\n",
       "      <td>1056.7800</td>\n",
       "      <td>13466216</td>\n",
       "      <td>2021-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>1061.3300</td>\n",
       "      <td>1095.5500</td>\n",
       "      <td>1053.1500</td>\n",
       "      <td>1070.3400</td>\n",
       "      <td>15680313</td>\n",
       "      <td>2021-12-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>1098.6400</td>\n",
       "      <td>1104.0000</td>\n",
       "      <td>1064.1400</td>\n",
       "      <td>1086.1900</td>\n",
       "      <td>18718015</td>\n",
       "      <td>2021-12-29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>1109.4900</td>\n",
       "      <td>1118.9999</td>\n",
       "      <td>1078.4200</td>\n",
       "      <td>1088.4700</td>\n",
       "      <td>20107969</td>\n",
       "      <td>2021-12-28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>1073.6700</td>\n",
       "      <td>1117.0000</td>\n",
       "      <td>1070.7152</td>\n",
       "      <td>1093.9400</td>\n",
       "      <td>23715273</td>\n",
       "      <td>2021-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>228.9700</td>\n",
       "      <td>231.9200</td>\n",
       "      <td>228.0000</td>\n",
       "      <td>231.2800</td>\n",
       "      <td>3979484</td>\n",
       "      <td>2017-01-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>226.9300</td>\n",
       "      <td>230.3100</td>\n",
       "      <td>225.4500</td>\n",
       "      <td>229.0100</td>\n",
       "      <td>5527893</td>\n",
       "      <td>2017-01-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1338</th>\n",
       "      <td>226.4200</td>\n",
       "      <td>227.4800</td>\n",
       "      <td>221.9500</td>\n",
       "      <td>226.7500</td>\n",
       "      <td>5911695</td>\n",
       "      <td>2017-01-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1339</th>\n",
       "      <td>214.7500</td>\n",
       "      <td>228.0000</td>\n",
       "      <td>214.3100</td>\n",
       "      <td>226.9900</td>\n",
       "      <td>11213471</td>\n",
       "      <td>2017-01-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1340</th>\n",
       "      <td>214.8600</td>\n",
       "      <td>220.3300</td>\n",
       "      <td>210.9600</td>\n",
       "      <td>216.9900</td>\n",
       "      <td>5923254</td>\n",
       "      <td>2017-01-03</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1259 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           open       high        low      close    volume        date\n",
       "82    1073.4444  1081.9999  1054.5900  1056.7800  13466216  2021-12-31\n",
       "83    1061.3300  1095.5500  1053.1500  1070.3400  15680313  2021-12-30\n",
       "84    1098.6400  1104.0000  1064.1400  1086.1900  18718015  2021-12-29\n",
       "85    1109.4900  1118.9999  1078.4200  1088.4700  20107969  2021-12-28\n",
       "86    1073.6700  1117.0000  1070.7152  1093.9400  23715273  2021-12-27\n",
       "...         ...        ...        ...        ...       ...         ...\n",
       "1336   228.9700   231.9200   228.0000   231.2800   3979484  2017-01-09\n",
       "1337   226.9300   230.3100   225.4500   229.0100   5527893  2017-01-06\n",
       "1338   226.4200   227.4800   221.9500   226.7500   5911695  2017-01-05\n",
       "1339   214.7500   228.0000   214.3100   226.9900  11213471  2017-01-04\n",
       "1340   214.8600   220.3300   210.9600   216.9900   5923254  2017-01-03\n",
       "\n",
       "[1259 rows x 6 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=TSLA&&outputsize=full&apikey=F2MED2PM07CN4D7U'\n",
    "r = requests.get(url)\n",
    "Tesla = r.json()\n",
    "Tesla = pd.DataFrame(Tesla)\n",
    "Tesla = getdata(Tesla)\n",
    "Tesla"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# adding additional column in each dataframe to merge them into one dataframe at the end\n",
    "Tesla['Name'] = pd.Series([\"Tesla\" for x in range(len(Tesla.index))]) \n",
    "gamestop['Name'] = pd.Series([\"Gamestop\" for x in range(len(gamestop.index))])\n",
    "Apple['Name'] = pd.Series([\"Apple\" for x in range(len(Apple.index))])\n",
    "Alphabet['Name'] = pd.Series([\"Alphabet\" for x in range(len(Alphabet.index))])\n",
    "Baba['Name'] = pd.Series([\"Baba\" for x in range(len(Baba.index))]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>date</th>\n",
       "      <th>Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>1073.4444</td>\n",
       "      <td>1081.9999</td>\n",
       "      <td>1054.5900</td>\n",
       "      <td>1056.7800</td>\n",
       "      <td>13466216</td>\n",
       "      <td>2021-12-31</td>\n",
       "      <td>Tesla</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>1061.3300</td>\n",
       "      <td>1095.5500</td>\n",
       "      <td>1053.1500</td>\n",
       "      <td>1070.3400</td>\n",
       "      <td>15680313</td>\n",
       "      <td>2021-12-30</td>\n",
       "      <td>Tesla</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>1098.6400</td>\n",
       "      <td>1104.0000</td>\n",
       "      <td>1064.1400</td>\n",
       "      <td>1086.1900</td>\n",
       "      <td>18718015</td>\n",
       "      <td>2021-12-29</td>\n",
       "      <td>Tesla</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>1109.4900</td>\n",
       "      <td>1118.9999</td>\n",
       "      <td>1078.4200</td>\n",
       "      <td>1088.4700</td>\n",
       "      <td>20107969</td>\n",
       "      <td>2021-12-28</td>\n",
       "      <td>Tesla</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>1073.6700</td>\n",
       "      <td>1117.0000</td>\n",
       "      <td>1070.7152</td>\n",
       "      <td>1093.9400</td>\n",
       "      <td>23715273</td>\n",
       "      <td>2021-12-27</td>\n",
       "      <td>Tesla</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>806.4000</td>\n",
       "      <td>809.9664</td>\n",
       "      <td>802.8300</td>\n",
       "      <td>806.6500</td>\n",
       "      <td>1274645</td>\n",
       "      <td>2017-01-09</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>795.2600</td>\n",
       "      <td>807.9000</td>\n",
       "      <td>792.2041</td>\n",
       "      <td>806.1500</td>\n",
       "      <td>1640170</td>\n",
       "      <td>2017-01-06</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1338</th>\n",
       "      <td>786.0800</td>\n",
       "      <td>794.4800</td>\n",
       "      <td>785.0200</td>\n",
       "      <td>794.0200</td>\n",
       "      <td>1335167</td>\n",
       "      <td>2017-01-05</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1339</th>\n",
       "      <td>788.3600</td>\n",
       "      <td>791.3400</td>\n",
       "      <td>783.1600</td>\n",
       "      <td>786.9000</td>\n",
       "      <td>1072958</td>\n",
       "      <td>2017-01-04</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1340</th>\n",
       "      <td>778.8100</td>\n",
       "      <td>789.6300</td>\n",
       "      <td>775.8000</td>\n",
       "      <td>786.1400</td>\n",
       "      <td>1657268</td>\n",
       "      <td>2017-01-03</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6295 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           open       high        low      close    volume        date   Name\n",
       "82    1073.4444  1081.9999  1054.5900  1056.7800  13466216  2021-12-31  Tesla\n",
       "83    1061.3300  1095.5500  1053.1500  1070.3400  15680313  2021-12-30  Tesla\n",
       "84    1098.6400  1104.0000  1064.1400  1086.1900  18718015  2021-12-29  Tesla\n",
       "85    1109.4900  1118.9999  1078.4200  1088.4700  20107969  2021-12-28  Tesla\n",
       "86    1073.6700  1117.0000  1070.7152  1093.9400  23715273  2021-12-27  Tesla\n",
       "...         ...        ...        ...        ...       ...         ...    ...\n",
       "1336   806.4000   809.9664   802.8300   806.6500   1274645  2017-01-09    NaN\n",
       "1337   795.2600   807.9000   792.2041   806.1500   1640170  2017-01-06    NaN\n",
       "1338   786.0800   794.4800   785.0200   794.0200   1335167  2017-01-05    NaN\n",
       "1339   788.3600   791.3400   783.1600   786.9000   1072958  2017-01-04    NaN\n",
       "1340   778.8100   789.6300   775.8000   786.1400   1657268  2017-01-03    NaN\n",
       "\n",
       "[6295 rows x 7 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#using concat function of pandas to merge all 5 dataframes into 1 \"Stock\" dataframe\n",
    "Stock = pd.concat([Tesla, gamestop,Apple,Baba,Alphabet]) \n",
    "Stock"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "Stock.to_csv('Stockfile.csv') #converting dataframe to csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Stock Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "      <th>date</th>\n",
       "      <th>Name</th>\n",
       "      <th>change</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1340</th>\n",
       "      <td>115.8000</td>\n",
       "      <td>116.3300</td>\n",
       "      <td>114.7600</td>\n",
       "      <td>116.15</td>\n",
       "      <td>28781865</td>\n",
       "      <td>2017-01-03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1339</th>\n",
       "      <td>115.8500</td>\n",
       "      <td>116.5100</td>\n",
       "      <td>115.7500</td>\n",
       "      <td>116.02</td>\n",
       "      <td>21118116</td>\n",
       "      <td>2017-01-04</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1338</th>\n",
       "      <td>115.9200</td>\n",
       "      <td>116.8642</td>\n",
       "      <td>115.8100</td>\n",
       "      <td>116.61</td>\n",
       "      <td>22193587</td>\n",
       "      <td>2017-01-05</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>116.7800</td>\n",
       "      <td>118.1600</td>\n",
       "      <td>116.4700</td>\n",
       "      <td>117.91</td>\n",
       "      <td>31751900</td>\n",
       "      <td>2017-01-06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>117.9500</td>\n",
       "      <td>119.4300</td>\n",
       "      <td>117.9400</td>\n",
       "      <td>118.99</td>\n",
       "      <td>33561948</td>\n",
       "      <td>2017-01-09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          open      high       low   close    volume        date Name  change\n",
       "1340  115.8000  116.3300  114.7600  116.15  28781865  2017-01-03  NaN    0.00\n",
       "1339  115.8500  116.5100  115.7500  116.02  21118116  2017-01-04  NaN   -0.13\n",
       "1338  115.9200  116.8642  115.8100  116.61  22193587  2017-01-05  NaN    0.59\n",
       "1337  116.7800  118.1600  116.4700  117.91  31751900  2017-01-06  NaN    1.30\n",
       "1336  117.9500  119.4300  117.9400  118.99  33561948  2017-01-09  NaN    1.08"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# edit here to get other company\n",
    "df = Apple.copy()\n",
    "\n",
    "df = df.sort_values('date')\n",
    "df['close'] = df['close'].astype(float)\n",
    "df['change'] = df['close'].diff().fillna(0)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ao Yu\\anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:63: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  return f(*args, **kwargs)\n",
      "C:\\Users\\Ao Yu\\anaconda3\\lib\\site-packages\\sklearn\\svm\\_base.py:985: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\"Liblinear failed to converge, increase \"\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.013349786048809051"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.svm import LinearSVR, SVR\n",
    "from sklearn.metrics import *\n",
    "\n",
    "train_num = int(df.shape[0] * 0.8) # 80% for train set\n",
    "test_num = df.shape[0] - train_num # 20% for test\n",
    "X = df[['open', 'high', 'low', 'close']].astype('float').values\n",
    "y = df[['change']].values\n",
    "# standardize features\n",
    "X_scaler = StandardScaler()\n",
    "X_ = X_scaler.fit_transform(X)\n",
    "\n",
    "y_scaler = StandardScaler()\n",
    "y_ = y_scaler.fit_transform(y)\n",
    "\n",
    "X_train = X_[0:train_num]\n",
    "y_train = y_[0:train_num]\n",
    "X_test = X_[train_num: ]\n",
    "y_test = y_[train_num: ]\n",
    "# build model\n",
    "model = LinearSVR()\n",
    "# model = SVR()\n",
    "# model training\n",
    "model.fit(X_train, y_train)\n",
    "# model prediction\n",
    "y_pred = model.predict(X_test)\n",
    "# model evaluation metric\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "mse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(y_test, label='y_test_change')\n",
    "plt.plot(y_pred, label='y_pred_change')\n",
    "plt.legend()\n",
    "plt.title('Price Change Prediction')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predicted closing price\n",
    "y_pred_close = np.round(X[train_num: , 3] + y_scaler.inverse_transform(y_pred.reshape((-1, 1))).squeeze(), 2)\n",
    "y_test_close = X[train_num: , 3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(y_test_close, label='y_test_close')\n",
    "plt.plot(y_pred_close, label='y_pred_close')\n",
    "plt.legend()\n",
    "plt.title('Closed Price Prediction')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
